Microsoft Windows [Version 10.0.22621.900]
(c) Microsoft Corporation. All rights reserved.

C:\Users\Med Yassine>mongod
{"t":{"$date":"2022-12-06T19:40:49.180+01:00"},"s":"I",  "c":"NETWORK",  "id":4915701, "ctx":"-","msg":"Initialized wire specification","attr":{"spec":{"incomingExternalClient":{"minWireVersion":0,"maxWireVersion":13},"incomingInternalClient":{"minWireVersion":0,"maxWireVersion":13},"outgoing":{"minWireVersion":0,"maxWireVersion":13},"isInternalClient":true}}}
{"t":{"$date":"2022-12-06T19:40:49.185+01:00"},"s":"I",  "c":"CONTROL",  "id":23285,   "ctx":"-","msg":"Automatically disabling TLS 1.0, to force-enable TLS 1.0 specify --sslDisabledProtocols 'none'"}
{"t":{"$date":"2022-12-06T19:40:49.964+01:00"},"s":"W",  "c":"ASIO",     "id":22601,   "ctx":"thread1","msg":"No TransportLayer configured during NetworkInterface startup"}
{"t":{"$date":"2022-12-06T19:40:49.965+01:00"},"s":"I",  "c":"NETWORK",  "id":4648602, "ctx":"thread1","msg":"Implicit TCP FastOpen in use."}
{"t":{"$date":"2022-12-06T19:40:49.968+01:00"},"s":"W",  "c":"ASIO",     "id":22601,   "ctx":"thread1","msg":"No TransportLayer configured during NetworkInterface startup"}
{"t":{"$date":"2022-12-06T19:40:49.968+01:00"},"s":"I",  "c":"REPL",     "id":5123008, "ctx":"thread1","msg":"Successfully registered PrimaryOnlyService","attr":{"service":"TenantMigrationDonorService","ns":"config.tenantMigrationDonors"}}
{"t":{"$date":"2022-12-06T19:40:49.968+01:00"},"s":"I",  "c":"REPL",     "id":5123008, "ctx":"thread1","msg":"Successfully registered PrimaryOnlyService","attr":{"service":"TenantMigrationRecipientService","ns":"config.tenantMigrationRecipients"}}
{"t":{"$date":"2022-12-06T19:40:49.968+01:00"},"s":"I",  "c":"CONTROL",  "id":5945603, "ctx":"thread1","msg":"Multi threading initialized"}
{"t":{"$date":"2022-12-06T19:40:49.970+01:00"},"s":"I",  "c":"CONTROL",  "id":4615611, "ctx":"initandlisten","msg":"MongoDB starting","attr":{"pid":34128,"port":27017,"dbPath":"C:/data/db/","architecture":"64-bit","host":"MedYassine-TUF"}}
{"t":{"$date":"2022-12-06T19:40:49.970+01:00"},"s":"I",  "c":"CONTROL",  "id":23398,   "ctx":"initandlisten","msg":"Target operating system minimum version","attr":{"targetMinOS":"Windows7/Windows Server 2008 R2"}}
{"t":{"$date":"2022-12-06T19:40:49.970+01:00"},"s":"I",  "c":"CONTROL",  "id":23403,   "ctx":"initandlisten","msg":"Build Info","attr":{"buildInfo":{"version":"5.0.14","gitVersion":"1b3b0073a0b436a8a502b612f24fb2bd572772e5","modules":[],"allocator":"tcmalloc","environment":{"distmod":"windows","distarch":"x86_64","target_arch":"x86_64"}}}}
{"t":{"$date":"2022-12-06T19:40:49.970+01:00"},"s":"I",  "c":"CONTROL",  "id":51765,   "ctx":"initandlisten","msg":"Operating System","attr":{"os":{"name":"Microsoft Windows 10","version":"10.0 (build 22621)"}}}
{"t":{"$date":"2022-12-06T19:40:49.970+01:00"},"s":"I",  "c":"CONTROL",  "id":21951,   "ctx":"initandlisten","msg":"Options set by command line","attr":{"options":{}}}
{"t":{"$date":"2022-12-06T19:40:49.980+01:00"},"s":"I",  "c":"STORAGE",  "id":22270,   "ctx":"initandlisten","msg":"Storage engine to use detected by data files","attr":{"dbpath":"C:/data/db/","storageEngine":"wiredTiger"}}
{"t":{"$date":"2022-12-06T19:40:49.981+01:00"},"s":"I",  "c":"STORAGE",  "id":22315,   "ctx":"initandlisten","msg":"Opening WiredTiger","attr":{"config":"create,cache_size=7383M,session_max=33000,eviction=(threads_min=4,threads_max=4),config_base=false,statistics=(fast),log=(enabled=true,archive=true,path=journal,compressor=snappy),builtin_extension_config=(zstd=(compression_level=6)),file_manager=(close_idle_time=600,close_scan_interval=10,close_handle_minimum=250),statistics_log=(wait=0),verbose=[recovery_progress,checkpoint_progress,compact_progress],"}}
{"t":{"$date":"2022-12-06T19:40:50.188+01:00"},"s":"I",  "c":"STORAGE",  "id":22430,   "ctx":"initandlisten","msg":"WiredTiger message","attr":{"message":"[1670352050:188300][34128:140710973548368], txn-recover: [WT_VERB_RECOVERY_PROGRESS] Recovering log 3 through 4"}}
{"t":{"$date":"2022-12-06T19:40:50.290+01:00"},"s":"I",  "c":"STORAGE",  "id":22430,   "ctx":"initandlisten","msg":"WiredTiger message","attr":{"message":"[1670352050:290322][34128:140710973548368], txn-recover: [WT_VERB_RECOVERY_PROGRESS] Recovering log 4 through 4"}}
{"t":{"$date":"2022-12-06T19:40:50.404+01:00"},"s":"I",  "c":"STORAGE",  "id":22430,   "ctx":"initandlisten","msg":"WiredTiger message","attr":{"message":"[1670352050:403892][34128:140710973548368], txn-recover: [WT_VERB_RECOVERY_ALL] Main recovery loop: starting at 3/4224 to 4/256"}}
{"t":{"$date":"2022-12-06T19:40:50.543+01:00"},"s":"I",  "c":"STORAGE",  "id":22430,   "ctx":"initandlisten","msg":"WiredTiger message","attr":{"message":"[1670352050:542891][34128:140710973548368], txn-recover: [WT_VERB_RECOVERY_PROGRESS] Recovering log 3 through 4"}}
{"t":{"$date":"2022-12-06T19:40:50.620+01:00"},"s":"I",  "c":"STORAGE",  "id":22430,   "ctx":"initandlisten","msg":"WiredTiger message","attr":{"message":"[1670352050:620010][34128:140710973548368], txn-recover: [WT_VERB_RECOVERY_PROGRESS] Recovering log 4 through 4"}}
{"t":{"$date":"2022-12-06T19:40:50.680+01:00"},"s":"I",  "c":"STORAGE",  "id":22430,   "ctx":"initandlisten","msg":"WiredTiger message","attr":{"message":"[1670352050:679964][34128:140710973548368], txn-recover: [WT_VERB_RECOVERY_ALL] Set global recovery timestamp: (0, 0)"}}
{"t":{"$date":"2022-12-06T19:40:50.681+01:00"},"s":"I",  "c":"STORAGE",  "id":22430,   "ctx":"initandlisten","msg":"WiredTiger message","attr":{"message":"[1670352050:679964][34128:140710973548368], txn-recover: [WT_VERB_RECOVERY_ALL] Set global oldest timestamp: (0, 0)"}}
{"t":{"$date":"2022-12-06T19:40:50.682+01:00"},"s":"I",  "c":"STORAGE",  "id":22430,   "ctx":"initandlisten","msg":"WiredTiger message","attr":{"message":"[1670352050:682962][34128:140710973548368], WT_SESSION.checkpoint: [WT_VERB_CHECKPOINT_PROGRESS] saving checkpoint snapshot min: 1, snapshot max: 1 snapshot count: 0, oldest timestamp: (0, 0) , meta checkpoint timestamp:(0, 0) base write gen: 146"}}
{"t":{"$date":"2022-12-06T19:40:50.691+01:00"},"s":"I",  "c":"STORAGE",  "id":4795906, "ctx":"initandlisten","msg":"WiredTiger opened","attr":{"durationMillis":710}}
{"t":{"$date":"2022-12-06T19:40:50.691+01:00"},"s":"I",  "c":"RECOVERY", "id":23987,   "ctx":"initandlisten","msg":"WiredTiger recoveryTimestamp","attr":{"recoveryTimestamp":{"$timestamp":{"t":0,"i":0}}}}
{"t":{"$date":"2022-12-06T19:40:50.712+01:00"},"s":"I",  "c":"STORAGE",  "id":22262,   "ctx":"initandlisten","msg":"Timestamp monitor starting"}
{"t":{"$date":"2022-12-06T19:40:50.714+01:00"},"s":"W",  "c":"CONTROL",  "id":22120,   "ctx":"initandlisten","msg":"Access control is not enabled for the database. Read and write access to data and configuration is unrestricted","tags":["startupWarnings"]}
{"t":{"$date":"2022-12-06T19:40:50.714+01:00"},"s":"W",  "c":"CONTROL",  "id":22140,   "ctx":"initandlisten","msg":"This server is bound to localhost. Remote systems will be unable to connect to this server. Start the server with --bind_ip <address> to specify which IP addresses it should serve responses from, or with --bind_ip_all to bind to all interfaces. If this behavior is desired, start the server with --bind_ip 127.0.0.1 to disable this warning","tags":["startupWarnings"]}
{"t":{"$date":"2022-12-06T19:40:50.733+01:00"},"s":"I",  "c":"NETWORK",  "id":4915702, "ctx":"initandlisten","msg":"Updated wire specification","attr":{"oldSpec":{"incomingExternalClient":{"minWireVersion":0,"maxWireVersion":13},"incomingInternalClient":{"minWireVersion":0,"maxWireVersion":13},"outgoing":{"minWireVersion":0,"maxWireVersion":13},"isInternalClient":true},"newSpec":{"incomingExternalClient":{"minWireVersion":0,"maxWireVersion":13},"incomingInternalClient":{"minWireVersion":13,"maxWireVersion":13},"outgoing":{"minWireVersion":13,"maxWireVersion":13},"isInternalClient":true}}}
{"t":{"$date":"2022-12-06T19:40:50.734+01:00"},"s":"I",  "c":"STORAGE",  "id":5071100, "ctx":"initandlisten","msg":"Clearing temp directory"}
{"t":{"$date":"2022-12-06T19:40:50.736+01:00"},"s":"I",  "c":"CONTROL",  "id":20536,   "ctx":"initandlisten","msg":"Flow Control is enabled on this deployment"}
{"t":{"$date":"2022-12-06T19:40:50.979+01:00"},"s":"I",  "c":"FTDC",     "id":20625,   "ctx":"initandlisten","msg":"Initializing full-time diagnostic data capture","attr":{"dataDirectory":"C:/data/db/diagnostic.data"}}
{"t":{"$date":"2022-12-06T19:40:50.997+01:00"},"s":"I",  "c":"REPL",     "id":6015317, "ctx":"initandlisten","msg":"Setting new configuration state","attr":{"newState":"ConfigReplicationDisabled","oldState":"ConfigPreStart"}}
{"t":{"$date":"2022-12-06T19:40:51.001+01:00"},"s":"I",  "c":"NETWORK",  "id":23015,   "ctx":"listener","msg":"Listening on","attr":{"address":"127.0.0.1"}}
{"t":{"$date":"2022-12-06T19:40:51.001+01:00"},"s":"I",  "c":"NETWORK",  "id":23016,   "ctx":"listener","msg":"Waiting for connections","attr":{"port":27017,"ssl":"off"}}
{"t":{"$date":"2022-12-06T19:41:50.717+01:00"},"s":"I",  "c":"STORAGE",  "id":22430,   "ctx":"Checkpointer","msg":"WiredTiger message","attr":{"message":"[1670352110:716800][34128:140710973548368], WT_SESSION.checkpoint: [WT_VERB_CHECKPOINT_PROGRESS] saving checkpoint snapshot min: 3, snapshot max: 3 snapshot count: 0, oldest timestamp: (0, 0) , meta checkpoint timestamp: (0, 0) base write gen: 146"}}
{"t":{"$date":"2022-12-06T19:42:50.730+01:00"},"s":"I",  "c":"STORAGE",  "id":22430,   "ctx":"Checkpointer","msg":"WiredTiger message","attr":{"message":"[1670352170:729863][34128:140710973548368], WT_SESSION.checkpoint: [WT_VERB_CHECKPOINT_PROGRESS] saving checkpoint snapshot min: 6, snapshot max: 6 snapshot count: 0, oldest timestamp: (0, 0) , meta checkpoint timestamp: (0, 0) base write gen: 146"}}
{"t":{"$date":"2022-12-06T19:43:08.698+01:00"},"s":"I",  "c":"CONTROL",  "id":23372,   "ctx":"thread44","msg":"Ctrl-C signal"}
{"t":{"$date":"2022-12-06T19:43:08.700+01:00"},"s":"I",  "c":"CONTROL",  "id":23371,   "ctx":"consoleTerminate","msg":"Received event, will terminate after current command ends","attr":{"controlCode":"CTRL_C_EVENT"}}
{"t":{"$date":"2022-12-06T19:43:08.701+01:00"},"s":"I",  "c":"REPL",     "id":4784900, "ctx":"consoleTerminate","msg":"Stepping down the ReplicationCoordinator for shutdown","attr":{"waitTimeMillis":15000}}
{"t":{"$date":"2022-12-06T19:43:08.701+01:00"},"s":"I",  "c":"REPL",     "id":4794602, "ctx":"consoleTerminate","msg":"Attempting to enter quiesce mode"}
{"t":{"$date":"2022-12-06T19:43:08.702+01:00"},"s":"I",  "c":"COMMAND",  "id":4784901, "ctx":"consoleTerminate","msg":"Shutting down the MirrorMaestro"}
{"t":{"$date":"2022-12-06T19:43:08.702+01:00"},"s":"I",  "c":"SHARDING", "id":4784902, "ctx":"consoleTerminate","msg":"Shutting down the WaitForMajorityService"}
{"t":{"$date":"2022-12-06T19:43:08.703+01:00"},"s":"I",  "c":"CONTROL",  "id":4784903, "ctx":"consoleTerminate","msg":"Shutting down the LogicalSessionCache"}
{"t":{"$date":"2022-12-06T19:43:08.704+01:00"},"s":"I",  "c":"NETWORK",  "id":20562,   "ctx":"consoleTerminate","msg":"Shutdown: going to close listening sockets"}
{"t":{"$date":"2022-12-06T19:43:08.706+01:00"},"s":"I",  "c":"NETWORK",  "id":4784905, "ctx":"consoleTerminate","msg":"Shutting down the global connection pool"}
{"t":{"$date":"2022-12-06T19:43:08.706+01:00"},"s":"I",  "c":"CONTROL",  "id":4784906, "ctx":"consoleTerminate","msg":"Shutting down the FlowControlTicketholder"}
{"t":{"$date":"2022-12-06T19:43:08.706+01:00"},"s":"I",  "c":"-",        "id":20520,   "ctx":"consoleTerminate","msg":"Stopping further Flow Control ticket acquisitions."}
{"t":{"$date":"2022-12-06T19:43:08.706+01:00"},"s":"I",  "c":"CONTROL",  "id":4784908, "ctx":"consoleTerminate","msg":"Shutting down the PeriodicThreadToAbortExpiredTransactions"}
{"t":{"$date":"2022-12-06T19:43:08.707+01:00"},"s":"I",  "c":"REPL",     "id":4784909, "ctx":"consoleTerminate","msg":"Shutting down the ReplicationCoordinator"}
{"t":{"$date":"2022-12-06T19:43:08.707+01:00"},"s":"I",  "c":"SHARDING", "id":4784910, "ctx":"consoleTerminate","msg":"Shutting down the ShardingInitializationMongoD"}
{"t":{"$date":"2022-12-06T19:43:08.708+01:00"},"s":"I",  "c":"REPL",     "id":4784911, "ctx":"consoleTerminate","msg":"Enqueuing the ReplicationStateTransitionLock for shutdown"}
{"t":{"$date":"2022-12-06T19:43:08.708+01:00"},"s":"I",  "c":"-",        "id":4784912, "ctx":"consoleTerminate","msg":"Killing all operations for shutdown"}
{"t":{"$date":"2022-12-06T19:43:08.708+01:00"},"s":"I",  "c":"-",        "id":4695300, "ctx":"consoleTerminate","msg":"Interrupted all currently running operations","attr":{"opsKilled":3}}
{"t":{"$date":"2022-12-06T19:43:08.708+01:00"},"s":"I",  "c":"TENANT_M", "id":5093807, "ctx":"consoleTerminate","msg":"Shutting down all TenantMigrationAccessBlockers on global shutdown"}
{"t":{"$date":"2022-12-06T19:43:08.708+01:00"},"s":"I",  "c":"COMMAND",  "id":4784913, "ctx":"consoleTerminate","msg":"Shutting down all open transactions"}
{"t":{"$date":"2022-12-06T19:43:08.709+01:00"},"s":"I",  "c":"REPL",     "id":4784914, "ctx":"consoleTerminate","msg":"Acquiring the ReplicationStateTransitionLock for shutdown"}
{"t":{"$date":"2022-12-06T19:43:08.709+01:00"},"s":"I",  "c":"INDEX",    "id":4784915, "ctx":"consoleTerminate","msg":"Shutting down the IndexBuildsCoordinator"}
{"t":{"$date":"2022-12-06T19:43:08.710+01:00"},"s":"I",  "c":"REPL",     "id":4784916, "ctx":"consoleTerminate","msg":"Reacquiring the ReplicationStateTransitionLock for shutdown"}
{"t":{"$date":"2022-12-06T19:43:08.710+01:00"},"s":"I",  "c":"REPL",     "id":4784917, "ctx":"consoleTerminate","msg":"Attempting to mark clean shutdown"}
{"t":{"$date":"2022-12-06T19:43:08.711+01:00"},"s":"I",  "c":"NETWORK",  "id":4784918, "ctx":"consoleTerminate","msg":"Shutting down the ReplicaSetMonitor"}
{"t":{"$date":"2022-12-06T19:43:08.711+01:00"},"s":"I",  "c":"SHARDING", "id":4784921, "ctx":"consoleTerminate","msg":"Shutting down the MigrationUtilExecutor"}
{"t":{"$date":"2022-12-06T19:43:08.711+01:00"},"s":"I",  "c":"ASIO",     "id":22582,   "ctx":"MigrationUtil-TaskExecutor","msg":"Killing all outstanding egress activity."}
{"t":{"$date":"2022-12-06T19:43:08.712+01:00"},"s":"I",  "c":"COMMAND",  "id":4784923, "ctx":"consoleTerminate","msg":"Shutting down the ServiceEntryPoint"}
{"t":{"$date":"2022-12-06T19:43:08.712+01:00"},"s":"I",  "c":"CONTROL",  "id":4784925, "ctx":"consoleTerminate","msg":"Shutting down free monitoring"}
{"t":{"$date":"2022-12-06T19:43:08.712+01:00"},"s":"I",  "c":"CONTROL",  "id":20609,   "ctx":"consoleTerminate","msg":"Shutting down free monitoring"}
{"t":{"$date":"2022-12-06T19:43:08.712+01:00"},"s":"I",  "c":"CONTROL",  "id":4784927, "ctx":"consoleTerminate","msg":"Shutting down the HealthLog"}
{"t":{"$date":"2022-12-06T19:43:08.712+01:00"},"s":"I",  "c":"CONTROL",  "id":4784928, "ctx":"consoleTerminate","msg":"Shutting down the TTL monitor"}
{"t":{"$date":"2022-12-06T19:43:08.713+01:00"},"s":"I",  "c":"INDEX",    "id":3684100, "ctx":"consoleTerminate","msg":"Shutting down TTL collection monitor thread"}
{"t":{"$date":"2022-12-06T19:43:08.713+01:00"},"s":"I",  "c":"INDEX",    "id":3684101, "ctx":"consoleTerminate","msg":"Finished shutting down TTL collection monitor thread"}
{"t":{"$date":"2022-12-06T19:43:08.713+01:00"},"s":"I",  "c":"CONTROL",  "id":4784929, "ctx":"consoleTerminate","msg":"Acquiring the global lock for shutdown"}
{"t":{"$date":"2022-12-06T19:43:08.713+01:00"},"s":"I",  "c":"CONTROL",  "id":4784930, "ctx":"consoleTerminate","msg":"Shutting down the storage engine"}
{"t":{"$date":"2022-12-06T19:43:08.714+01:00"},"s":"I",  "c":"STORAGE",  "id":22320,   "ctx":"consoleTerminate","msg":"Shutting down journal flusher thread"}
{"t":{"$date":"2022-12-06T19:43:08.714+01:00"},"s":"I",  "c":"STORAGE",  "id":22321,   "ctx":"consoleTerminate","msg":"Finished shutting down journal flusher thread"}
{"t":{"$date":"2022-12-06T19:43:08.714+01:00"},"s":"I",  "c":"STORAGE",  "id":22322,   "ctx":"consoleTerminate","msg":"Shutting down checkpoint thread"}
{"t":{"$date":"2022-12-06T19:43:08.714+01:00"},"s":"I",  "c":"STORAGE",  "id":22323,   "ctx":"consoleTerminate","msg":"Finished shutting down checkpoint thread"}
{"t":{"$date":"2022-12-06T19:43:08.715+01:00"},"s":"I",  "c":"STORAGE",  "id":20282,   "ctx":"consoleTerminate","msg":"Deregistering all the collections"}
{"t":{"$date":"2022-12-06T19:43:08.715+01:00"},"s":"I",  "c":"STORAGE",  "id":22261,   "ctx":"consoleTerminate","msg":"Timestamp monitor shutting down"}
{"t":{"$date":"2022-12-06T19:43:08.715+01:00"},"s":"I",  "c":"STORAGE",  "id":22317,   "ctx":"consoleTerminate","msg":"WiredTigerKVEngine shutting down"}
{"t":{"$date":"2022-12-06T19:43:08.715+01:00"},"s":"I",  "c":"STORAGE",  "id":22318,   "ctx":"consoleTerminate","msg":"Shutting down session sweeper thread"}
{"t":{"$date":"2022-12-06T19:43:08.715+01:00"},"s":"I",  "c":"STORAGE",  "id":22319,   "ctx":"consoleTerminate","msg":"Finished shutting down session sweeper thread"}
{"t":{"$date":"2022-12-06T19:43:08.716+01:00"},"s":"I",  "c":"STORAGE",  "id":4795902, "ctx":"consoleTerminate","msg":"Closing WiredTiger","attr":{"closeConfig":"leak_memory=true,"}}
{"t":{"$date":"2022-12-06T19:43:08.716+01:00"},"s":"I",  "c":"STORAGE",  "id":22430,   "ctx":"consoleTerminate","msg":"WiredTiger message","attr":{"message":"[1670352188:716221][34128:140710973548368], close_ckpt: [WT_VERB_CHECKPOINT_PROGRESS] saving checkpoint snapshot min: 8, snapshot max: 8 snapshot count: 0, oldest timestamp: (0, 0) , meta checkpoint timestamp: (0, 0) base write gen: 146"}}
{"t":{"$date":"2022-12-06T19:43:08.740+01:00"},"s":"I",  "c":"STORAGE",  "id":4795901, "ctx":"consoleTerminate","msg":"WiredTiger closed","attr":{"durationMillis":24}}
{"t":{"$date":"2022-12-06T19:43:08.740+01:00"},"s":"I",  "c":"STORAGE",  "id":22281,   "ctx":"consoleTerminate","msg":"shutdown: removing fs lock..."}
{"t":{"$date":"2022-12-06T19:43:08.741+01:00"},"s":"I",  "c":"-",        "id":4784931, "ctx":"consoleTerminate","msg":"Dropping the scope cache for shutdown"}
{"t":{"$date":"2022-12-06T19:43:08.741+01:00"},"s":"I",  "c":"FTDC",     "id":4784926, "ctx":"consoleTerminate","msg":"Shutting down full-time data capture"}
{"t":{"$date":"2022-12-06T19:43:08.741+01:00"},"s":"I",  "c":"FTDC",     "id":20626,   "ctx":"consoleTerminate","msg":"Shutting down full-time diagnostic data capture"}
{"t":{"$date":"2022-12-06T19:43:08.747+01:00"},"s":"I",  "c":"CONTROL",  "id":20565,   "ctx":"consoleTerminate","msg":"Now exiting"}
{"t":{"$date":"2022-12-06T19:43:08.748+01:00"},"s":"I",  "c":"CONTROL",  "id":23138,   "ctx":"consoleTerminate","msg":"Shutting down","attr":{"exitCode":12}}

C:\Users\Med Yassine>show dbs
'show' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\Med Yassine>s

C:\Users\Med Yassine>mongo
MongoDB shell version v5.0.14
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("4740eead-49c3-4be4-9a14-a0df318a0b4b") }
MongoDB server version: 5.0.14
================
Warning: the "mongo" shell has been superseded by "mongosh",
which delivers improved usability and compatibility.The "mongo" shell has been deprecated and will be removed in
an upcoming release.
For installation instructions, see
https://docs.mongodb.com/mongodb-shell/install/
================
---
The server generated these startup warnings when booting:
        2022-12-05T20:12:29.571+01:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
---
---
        Enable MongoDB's free cloud-based monitoring service, which will then receive and display
        metrics about your deployment (disk utilization, CPU, operation statistics, etc).

        The monitoring data will be available on a MongoDB website with a unique URL accessible to you
        and anyone you share the URL with. MongoDB may use this information to make product
        improvements and to suggest MongoDB products and deployment options to you.

        To enable free monitoring, run the following command: db.enableFreeMonitoring()
        To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
---
> show dbs
admin        0.000GB
config       0.000GB
contact      0.000GB
contactList  0.000GB
local        0.000GB
> use contact
switched to db contact
> show collections
contactList
> db.contactList.find()
> db.contactList.find()
> db.contactlist.find()
> db.contact.insertMany([{
...     lastName: "Ben Lahmed",
...     firstName: "Fares",
...     email:"fares@gmail.com",
...     age:26,
... },
... {
...     lastName: "Kefi",
...     firstName: "Seif",
...     email:"kefi@gmail.com",
...     age:15,
... },
... {
...     lastName: "Fatnassi",
...     firstName: "Sarra",
...     email:"sarra.f@gmail.com",
...     age:40,
... },
... {
...     lastName: "Ben Yahya",
...     firstName: "Rym",
...     email:"",
...     age:4,
... },
... {
...     lastName: "Cherif",
...     firstName: "Sami",
...     email:"",
...     age:3,
... },])
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("638f8ec75f948d7c61a122a4"),
                ObjectId("638f8ec75f948d7c61a122a5"),
                ObjectId("638f8ec75f948d7c61a122a6"),
                ObjectId("638f8ec75f948d7c61a122a7"),
                ObjectId("638f8ec75f948d7c61a122a8")
        ]
}
> db.contactList.find().pretty()
> db.contact.find().pretty()
{
        "_id" : ObjectId("638f8ec75f948d7c61a122a4"),
        "lastName" : "Ben Lahmed",
        "firstName" : "Fares",
        "email" : "fares@gmail.com",
        "age" : 26
}
{
        "_id" : ObjectId("638f8ec75f948d7c61a122a5"),
        "lastName" : "Kefi",
        "firstName" : "Seif",
        "email" : "kefi@gmail.com",
        "age" : 15
}
{
        "_id" : ObjectId("638f8ec75f948d7c61a122a6"),
        "lastName" : "Fatnassi",
        "firstName" : "Sarra",
        "email" : "sarra.f@gmail.com",
        "age" : 40
}
{
        "_id" : ObjectId("638f8ec75f948d7c61a122a7"),
        "lastName" : "Ben Yahya",
        "firstName" : "Rym",
        "email" : "",
        "age" : 4
}
{
        "_id" : ObjectId("638f8ec75f948d7c61a122a8"),
        "lastName" : "Cherif",
        "firstName" : "Sami",
        "email" : "",
        "age" : 3
}
> show collections
contact
contactList
> db.collection.drop()
false
> db.contact.find().pretty()
{
        "_id" : ObjectId("638f8ec75f948d7c61a122a4"),
        "lastName" : "Ben Lahmed",
        "firstName" : "Fares",
        "email" : "fares@gmail.com",
        "age" : 26
}
{
        "_id" : ObjectId("638f8ec75f948d7c61a122a5"),
        "lastName" : "Kefi",
        "firstName" : "Seif",
        "email" : "kefi@gmail.com",
        "age" : 15
}
{
        "_id" : ObjectId("638f8ec75f948d7c61a122a6"),
        "lastName" : "Fatnassi",
        "firstName" : "Sarra",
        "email" : "sarra.f@gmail.com",
        "age" : 40
}
{
        "_id" : ObjectId("638f8ec75f948d7c61a122a7"),
        "lastName" : "Ben Yahya",
        "firstName" : "Rym",
        "email" : "",
        "age" : 4
}
{
        "_id" : ObjectId("638f8ec75f948d7c61a122a8"),
        "lastName" : "Cherif",
        "firstName" : "Sami",
        "email" : "",
        "age" : 3
}
> db.collection.drop()
false
> db.collection.remove()
uncaught exception: Error: remove needs a query :
DBCollection.prototype._parseRemove@src/mongo/shell/collection.js:364:15
DBCollection.prototype.remove@src/mongo/shell/collection.js:394:18
@(shell):1:1
> db.dropDatabase()
{ "ok" : 1 }
> show dbs
admin        0.000GB
config       0.000GB
contactList  0.000GB
local        0.000GB
> use contactList
switched to db contactList
> db.dropDatabase()
{ "ok" : 1 }
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
> use contact
switched to db contact
> db.createCollection('contactList')
{ "ok" : 1 }
> db.contactList.insertMany([{
...     lastName: "Ben Lahmed",
...     firstName: "Fares",
...     email:"fares@gmail.com",
...     age:26,
... },
... {
...     lastName: "Kefi",
...     firstName: "Seif",
...     email:"kefi@gmail.com",
...     age:15,
... },
... {
...     lastName: "Fatnassi",
...     firstName: "Sarra",
...     email:"sarra.f@gmail.com",
...     age:40,
... },
... {
...     lastName: "Ben Yahya",
...     firstName: "Rym",
...     email:"",
...     age:4,
... },
... {
...     lastName: "Cherif",
...     firstName: "Sami",
...     email:"",
...     age:3,
... },])
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("638f90bc5f948d7c61a122a9"),
                ObjectId("638f90bc5f948d7c61a122aa"),
                ObjectId("638f90bc5f948d7c61a122ab"),
                ObjectId("638f90bc5f948d7c61a122ac"),
                ObjectId("638f90bc5f948d7c61a122ad")
        ]
}
> ^C
bye

C:\Users\Med Yassine>

C:\Users\Med Yassine>mongo
MongoDB shell version v5.0.14
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("716f3239-e59c-480e-8a2a-51aa232522f2") }
MongoDB server version: 5.0.14
================
Warning: the "mongo" shell has been superseded by "mongosh",
which delivers improved usability and compatibility.The "mongo" shell has been deprecated and will be removed in
an upcoming release.
For installation instructions, see
https://docs.mongodb.com/mongodb-shell/install/
================
---
The server generated these startup warnings when booting:
        2022-12-05T20:12:29.571+01:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
---
---
        Enable MongoDB's free cloud-based monitoring service, which will then receive and display
        metrics about your deployment (disk utilization, CPU, operation statistics, etc).

        The monitoring data will be available on a MongoDB website with a unique URL accessible to you
        and anyone you share the URL with. MongoDB may use this information to make product
        improvements and to suggest MongoDB products and deployment options to you.

        To enable free monitoring, run the following command: db.enableFreeMonitoring()
        To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
---
> show dbs
admin    0.000GB
config   0.000GB
contact  0.000GB
local    0.000GB
> use contact
switched to db contact
> db.contactList.find({_id:  ObjectId("638f90bc5f948d7c61a122aa")})
{ "_id" : ObjectId("638f90bc5f948d7c61a122aa"), "lastName" : "Kefi", "firstName" : "Seif", "email" : "kefi@gmail.com", "age" : 15 }
> db.contactList.find({_id:  ObjectId("638f90bc5f948d7c61a122aa")}).pretty()
{
        "_id" : ObjectId("638f90bc5f948d7c61a122aa"),
        "lastName" : "Kefi",
        "firstName" : "Seif",
        "email" : "kefi@gmail.com",
        "age" : 15
}
> db.contactList.find({age:{$gt:18}})
{ "_id" : ObjectId("638f90bc5f948d7c61a122a9"), "lastName" : "Ben Lahmed", "firstName" : "Fares", "email" : "fares@gmail.com", "age" : 26 }
{ "_id" : ObjectId("638f90bc5f948d7c61a122ab"), "lastName" : "Fatnassi", "firstName" : "Sarra", "email" : "sarra.f@gmail.com", "age" : 40 }
> db.contactList.find({age:{$gt:18}}).pretty
function() {
    this._prettyShell = true;
    return this;
}
> db.contactList.find({age:{$gte:18}}).pretty
function() {
    this._prettyShell = true;
    return this;
}
> db.contactList.find({age:{$gte:18}})
{ "_id" : ObjectId("638f90bc5f948d7c61a122a9"), "lastName" : "Ben Lahmed", "firstName" : "Fares", "email" : "fares@gmail.com", "age" : 26 }
{ "_id" : ObjectId("638f90bc5f948d7c61a122ab"), "lastName" : "Fatnassi", "firstName" : "Sarra", "email" : "sarra.f@gmail.com", "age" : 40 }
> db.contactList.find({$and:[{age:{$gte:10}},{lastName:{$regex:"ah"}}]})
{ "_id" : ObjectId("638f90bc5f948d7c61a122a9"), "lastName" : "Ben Lahmed", "firstName" : "Fares", "email" : "fares@gmail.com", "age" : 26 }
> db.contactList.find({$and:[{age:{$gte:10}},{lastName:{$regex:"ah"}}]}).pretty()
{
        "_id" : ObjectId("638f90bc5f948d7c61a122a9"),
        "lastName" : "Ben Lahmed",
        "firstName" : "Fares",
        "email" : "fares@gmail.com",
        "age" : 26
}
>
> db.contactList.update({firstName:"Seif"},{$set{firstName:"Anis}})
uncaught exception: SyntaxError: missing : after property id :
@(shell):1:46
> db.contactList.update({firstName:"Seif"},{$set:{firstName:"Anis}})
uncaught exception: SyntaxError: "" literal not terminated before end of script :
@(shell):1:66
> db.contactList.update({firstName:"Seif"},{$set:{firstName:"Anis"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.contactList.find().pretty()
{
        "_id" : ObjectId("638f90bc5f948d7c61a122a9"),
        "lastName" : "Ben Lahmed",
        "firstName" : "Fares",
        "email" : "fares@gmail.com",
        "age" : 26
}
{
        "_id" : ObjectId("638f90bc5f948d7c61a122aa"),
        "lastName" : "Kefi",
        "firstName" : "Anis",
        "email" : "kefi@gmail.com",
        "age" : 15
}
{
        "_id" : ObjectId("638f90bc5f948d7c61a122ab"),
        "lastName" : "Fatnassi",
        "firstName" : "Sarra",
        "email" : "sarra.f@gmail.com",
        "age" : 40
}
{
        "_id" : ObjectId("638f90bc5f948d7c61a122ac"),
        "lastName" : "Ben Yahya",
        "firstName" : "Rym",
        "email" : "",
        "age" : 4
}
{
        "_id" : ObjectId("638f90bc5f948d7c61a122ad"),
        "lastName" : "Cherif",
        "firstName" : "Sami",
        "email" : "",
        "age" : 3
}
>
> db.contactList.find(firstName:"Anis").pretty()
uncaught exception: SyntaxError: missing ) after argument list :
@(shell):1:29
> db.contactList.find({firstName:"Anis"}).pretty()
{
        "_id" : ObjectId("638f90bc5f948d7c61a122aa"),
        "lastName" : "Kefi",
        "firstName" : "Anis",
        "email" : "kefi@gmail.com",
        "age" : 15
}
> db.contactList.remove({age:{$lt:5}})
WriteResult({ "nRemoved" : 2 })
> db.contactList.find().pretty()
{
        "_id" : ObjectId("638f90bc5f948d7c61a122a9"),
        "lastName" : "Ben Lahmed",
        "firstName" : "Fares",
        "email" : "fares@gmail.com",
        "age" : 26
}
{
        "_id" : ObjectId("638f90bc5f948d7c61a122aa"),
        "lastName" : "Kefi",
        "firstName" : "Anis",
        "email" : "kefi@gmail.com",
        "age" : 15
}
{
        "_id" : ObjectId("638f90bc5f948d7c61a122ab"),
        "lastName" : "Fatnassi",
        "firstName" : "Sarra",
        "email" : "sarra.f@gmail.com",
        "age" : 40
}
>
